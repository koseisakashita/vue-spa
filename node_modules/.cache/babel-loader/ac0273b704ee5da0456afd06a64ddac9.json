{"remainingRequest":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/thread-loader/dist/cjs.js!/Users/sakashita/Documents/software/sample-vue-app/node_modules/babel-loader/lib/index.js!/Users/sakashita/Documents/software/sample-vue-app/node_modules/vuetify/lib/util/mask.js","dependencies":[{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/vuetify/lib/util/mask.js","mtime":499162500000},{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwpleHBvcnQgdmFyIGRlZmF1bHREZWxpbWl0ZXJzID0gL1stISQlXiYqKClfK3x+PWB7fVtcXToiOyc8Pj8sLi9cXCBdLzsKZXhwb3J0IHZhciBpc01hc2tEZWxpbWl0ZXIgPSBmdW5jdGlvbiBpc01hc2tEZWxpbWl0ZXIoY2hhcikgewogIHJldHVybiBjaGFyID8gZGVmYXVsdERlbGltaXRlcnMudGVzdChjaGFyKSA6IGZhbHNlOwp9Owp2YXIgYWxsb3dlZE1hc2tzID0gewogICcjJzogewogICAgdGVzdDogZnVuY3Rpb24gdGVzdChjaGFyKSB7CiAgICAgIHJldHVybiAvWzAtOV0vLnRlc3QoY2hhcik7CiAgICB9CiAgfSwKICAnQSc6IHsKICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QoY2hhcikgewogICAgICByZXR1cm4gL1tBLVpdL2kudGVzdChjaGFyKTsKICAgIH0sCiAgICBjb252ZXJ0OiBmdW5jdGlvbiBjb252ZXJ0KGNoYXIpIHsKICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKTsKICAgIH0KICB9LAogICdhJzogewogICAgdGVzdDogZnVuY3Rpb24gdGVzdChjaGFyKSB7CiAgICAgIHJldHVybiAvW2Etel0vaS50ZXN0KGNoYXIpOwogICAgfSwKICAgIGNvbnZlcnQ6IGZ1bmN0aW9uIGNvbnZlcnQoY2hhcikgewogICAgICByZXR1cm4gY2hhci50b0xvd2VyQ2FzZSgpOwogICAgfQogIH0sCiAgJ04nOiB7CiAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KGNoYXIpIHsKICAgICAgcmV0dXJuIC9bMC05QS1aXS9pLnRlc3QoY2hhcik7CiAgICB9LAogICAgY29udmVydDogZnVuY3Rpb24gY29udmVydChjaGFyKSB7CiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCk7CiAgICB9CiAgfSwKICAnbic6IHsKICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QoY2hhcikgewogICAgICByZXR1cm4gL1swLTlhLXpdL2kudGVzdChjaGFyKTsKICAgIH0sCiAgICBjb252ZXJ0OiBmdW5jdGlvbiBjb252ZXJ0KGNoYXIpIHsKICAgICAgcmV0dXJuIGNoYXIudG9Mb3dlckNhc2UoKTsKICAgIH0KICB9LAogICdYJzogewogICAgdGVzdDogaXNNYXNrRGVsaW1pdGVyCiAgfQp9OwoKdmFyIGlzTWFzayA9IGZ1bmN0aW9uIGlzTWFzayhjaGFyKSB7CiAgcmV0dXJuIGFsbG93ZWRNYXNrcy5oYXNPd25Qcm9wZXJ0eShjaGFyKTsKfTsKCnZhciBjb252ZXJ0ID0gZnVuY3Rpb24gY29udmVydChtYXNrLCBjaGFyKSB7CiAgcmV0dXJuIGFsbG93ZWRNYXNrc1ttYXNrXS5jb252ZXJ0ID8gYWxsb3dlZE1hc2tzW21hc2tdLmNvbnZlcnQoY2hhcikgOiBjaGFyOwp9OwoKdmFyIG1hc2tWYWxpZGF0ZXMgPSBmdW5jdGlvbiBtYXNrVmFsaWRhdGVzKG1hc2ssIGNoYXIpIHsKICBpZiAoY2hhciA9PSBudWxsIHx8ICFpc01hc2sobWFzaykpIHJldHVybiBmYWxzZTsKICByZXR1cm4gYWxsb3dlZE1hc2tzW21hc2tdLnRlc3QoY2hhcik7Cn07CgpleHBvcnQgdmFyIG1hc2tUZXh0ID0gZnVuY3Rpb24gbWFza1RleHQodGV4dCwgbWFza2VkLCBkb250RmlsbE1hc2tCbGFua3MpIHsKICBpZiAodGV4dCA9PSBudWxsKSByZXR1cm4gJyc7CiAgdGV4dCA9IFN0cmluZyh0ZXh0KTsKICBpZiAoIW1hc2tlZC5sZW5ndGggfHwgIXRleHQubGVuZ3RoKSByZXR1cm4gdGV4dDsKICBpZiAoIUFycmF5LmlzQXJyYXkobWFza2VkKSkgbWFza2VkID0gbWFza2VkLnNwbGl0KCcnKTsKICB2YXIgdGV4dEluZGV4ID0gMDsKICB2YXIgbWFza0luZGV4ID0gMDsKICB2YXIgbmV3VGV4dCA9ICcnOwoKICB3aGlsZSAobWFza0luZGV4IDwgbWFza2VkLmxlbmd0aCkgewogICAgdmFyIG1hc2sgPSBtYXNrZWRbbWFza0luZGV4XTsgLy8gQXNzaWduIHRoZSBuZXh0IGNoYXJhY3RlcgoKICAgIHZhciBjaGFyID0gdGV4dFt0ZXh0SW5kZXhdOyAvLyBDaGVjayBpZiBtYXNrIGlzIGRlbGltaXRlcgogICAgLy8gYW5kIGN1cnJlbnQgY2hhciBtYXRjaGVzCgogICAgaWYgKCFpc01hc2sobWFzaykgJiYgY2hhciA9PT0gbWFzaykgewogICAgICBuZXdUZXh0ICs9IG1hc2s7CiAgICAgIHRleHRJbmRleCsrOyAvLyBDaGVjayBpZiBub3QgbWFzawogICAgfSBlbHNlIGlmICghaXNNYXNrKG1hc2spICYmICFkb250RmlsbE1hc2tCbGFua3MpIHsKICAgICAgbmV3VGV4dCArPSBtYXNrOyAvLyBDaGVjayBpZiBpcyBtYXNrIGFuZCB2YWxpZGF0ZXMKICAgIH0gZWxzZSBpZiAobWFza1ZhbGlkYXRlcyhtYXNrLCBjaGFyKSkgewogICAgICBuZXdUZXh0ICs9IGNvbnZlcnQobWFzaywgY2hhcik7CiAgICAgIHRleHRJbmRleCsrOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG5ld1RleHQ7CiAgICB9CgogICAgbWFza0luZGV4Kys7CiAgfQoKICByZXR1cm4gbmV3VGV4dDsKfTsKZXhwb3J0IHZhciB1bm1hc2tUZXh0ID0gZnVuY3Rpb24gdW5tYXNrVGV4dCh0ZXh0KSB7CiAgcmV0dXJuIHRleHQgPyBTdHJpbmcodGV4dCkucmVwbGFjZShuZXcgUmVnRXhwKGRlZmF1bHREZWxpbWl0ZXJzLCAnZycpLCAnJykgOiB0ZXh0Owp9Ow=="},{"version":3,"sources":["../../src/util/mask.ts"],"names":[],"mappings":"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","sourcesContent":["export interface MaskItem {\n  test: (char: string) => boolean\n  convert?: (char: string) => string\n}\nexport type MaskType = '#' | 'A' | 'a' | 'N' | 'n' | 'X'\n\nexport const defaultDelimiters = /[-!$%^&*()_+|~=`{}[\\]:\";'<>?,./\\\\ ]/\n\nexport const isMaskDelimiter = (char: string): boolean => char ? defaultDelimiters.test(char) : false\n\nconst allowedMasks: Dictionary<MaskItem> = {\n  '#': {\n    test: char => /[0-9]/.test(char)\n  },\n  'A': {\n    test: char => /[A-Z]/i.test(char),\n    convert: char => char.toUpperCase()\n  },\n  'a': {\n    test: char => /[a-z]/i.test(char),\n    convert: char => char.toLowerCase()\n  },\n  'N': {\n    test: char => /[0-9A-Z]/i.test(char),\n    convert: char => char.toUpperCase()\n  },\n  'n': {\n    test: char => /[0-9a-z]/i.test(char),\n    convert: char => char.toLowerCase()\n  },\n  'X': {\n    test: isMaskDelimiter\n  }\n}\n\nconst isMask = (char: string): boolean => allowedMasks.hasOwnProperty(char)\n\nconst convert = (mask: MaskType, char: string): string => {\n  return allowedMasks[mask].convert ? allowedMasks[mask].convert!(char) : char\n}\n\nconst maskValidates = (mask: MaskType, char: string): boolean => {\n  if (char == null || !isMask(mask)) return false\n  return allowedMasks[mask].test(char)\n}\n\nexport const maskText = (text: string | null | undefined, masked: string | string[], dontFillMaskBlanks: boolean): string => {\n  if (text == null) return ''\n  text = String(text)\n  if (!masked.length || !text.length) return text\n  if (!Array.isArray(masked)) masked = masked.split('')\n\n  let textIndex = 0\n  let maskIndex = 0\n  let newText = ''\n\n  while (maskIndex < masked.length) {\n    const mask = masked[maskIndex]\n\n    // Assign the next character\n    const char = text[textIndex]\n\n    // Check if mask is delimiter\n    // and current char matches\n    if (!isMask(mask) && char === mask) {\n      newText += mask\n      textIndex++\n    // Check if not mask\n    } else if (!isMask(mask) && !dontFillMaskBlanks) {\n      newText += mask\n    // Check if is mask and validates\n    } else if (maskValidates(mask as MaskType, char)) {\n      newText += convert(mask as MaskType, char)\n      textIndex++\n    } else {\n      return newText\n    }\n\n    maskIndex++\n  }\n\n  return newText\n}\n\nexport const unmaskText = (text: string): string => {\n  return text ? String(text).replace(new RegExp(defaultDelimiters, 'g'), '') : text\n}\n"],"sourceRoot":""}]}