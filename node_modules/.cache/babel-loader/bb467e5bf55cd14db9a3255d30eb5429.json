{"remainingRequest":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/thread-loader/dist/cjs.js!/Users/sakashita/Documents/software/sample-vue-app/node_modules/babel-loader/lib/index.js!/Users/sakashita/Documents/software/sample-vue-app/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanel.js","dependencies":[{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanel.js","mtime":499162500000},{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sakashita/Documents/software/sample-vue-app/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKCnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOwoKICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsKICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsKICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9OwoKaW1wb3J0ICcuLi8uLi8uLi9zcmMvc3R5bHVzL2NvbXBvbmVudHMvX2V4cGFuc2lvbi1wYW5lbC5zdHlsJzsKaW1wb3J0IFRoZW1lYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvdGhlbWVhYmxlJzsKaW1wb3J0IHsgcHJvdmlkZSBhcyBSZWdpc3RyYWJsZVByb3ZpZGUgfSBmcm9tICcuLi8uLi9taXhpbnMvcmVnaXN0cmFibGUnOwppbXBvcnQgbWl4aW5zIGZyb20gJy4uLy4uL3V0aWwvbWl4aW5zJzsKLyogQHZ1ZS9jb21wb25lbnQgKi8KCmV4cG9ydCBkZWZhdWx0IG1peGlucyhUaGVtZWFibGUsIFJlZ2lzdHJhYmxlUHJvdmlkZSgnZXhwYW5zaW9uUGFuZWwnKSkuZXh0ZW5kKHsKICBuYW1lOiAndi1leHBhbnNpb24tcGFuZWwnLAogIHByb3ZpZGU6IGZ1bmN0aW9uIHByb3ZpZGUoKSB7CiAgICByZXR1cm4gewogICAgICBleHBhbnNpb25QYW5lbDogdGhpcwogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICBkaXNhYmxlZDogQm9vbGVhbiwKICAgIHJlYWRvbmx5OiBCb29sZWFuLAogICAgZXhwYW5kOiBCb29sZWFuLAogICAgZm9jdXNhYmxlOiBCb29sZWFuLAogICAgaW5zZXQ6IEJvb2xlYW4sCiAgICBwb3BvdXQ6IEJvb2xlYW4sCiAgICB2YWx1ZTogewogICAgICB0eXBlOiBbTnVtYmVyLCBBcnJheV0sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaXRlbXM6IFtdLAogICAgICBvcGVuOiBbXQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBjbGFzc2VzOiBmdW5jdGlvbiBjbGFzc2VzKCkgewogICAgICByZXR1cm4gX2V4dGVuZHMoewogICAgICAgICd2LWV4cGFuc2lvbi1wYW5lbC0tZm9jdXNhYmxlJzogdGhpcy5mb2N1c2FibGUsCiAgICAgICAgJ3YtZXhwYW5zaW9uLXBhbmVsLS1wb3BvdXQnOiB0aGlzLnBvcG91dCwKICAgICAgICAndi1leHBhbnNpb24tcGFuZWwtLWluc2V0JzogdGhpcy5pbnNldAogICAgICB9LCB0aGlzLnRoZW1lQ2xhc3Nlcyk7CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgZXhwYW5kOiBmdW5jdGlvbiBleHBhbmQodikgewogICAgICB2YXIgb3BlbkluZGV4ID0gLTE7CgogICAgICBpZiAoIXYpIHsKICAgICAgICAvLyBDbG9zZSBhbGwgcGFuZWxzIHVubGVzcyBvbmx5IG9uZSBpcyBvcGVuCiAgICAgICAgdmFyIG9wZW5Db3VudCA9IHRoaXMub3Blbi5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdmFsKSB7CiAgICAgICAgICByZXR1cm4gdmFsID8gYWNjICsgMSA6IGFjYzsKICAgICAgICB9LCAwKTsKICAgICAgICB2YXIgb3BlbiA9IEFycmF5KHRoaXMuaXRlbXMubGVuZ3RoKS5maWxsKGZhbHNlKTsKCiAgICAgICAgaWYgKG9wZW5Db3VudCA9PT0gMSkgewogICAgICAgICAgb3BlbkluZGV4ID0gdGhpcy5vcGVuLmluZGV4T2YodHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAob3BlbkluZGV4ID4gLTEpIHsKICAgICAgICAgIG9wZW5bb3BlbkluZGV4XSA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICB0aGlzLm9wZW4gPSBvcGVuOwogICAgICB9CgogICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHYgPyB0aGlzLm9wZW4gOiBvcGVuSW5kZXggPiAtMSA/IG9wZW5JbmRleCA6IG51bGwpOwogICAgfSwKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSh2KSB7CiAgICAgIHRoaXMudXBkYXRlRnJvbVZhbHVlKHYpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMudmFsdWUgIT09IG51bGwgJiYgdGhpcy51cGRhdGVGcm9tVmFsdWUodGhpcy52YWx1ZSk7CiAgfSwKICBtZXRob2RzOiB7CiAgICB1cGRhdGVGcm9tVmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUZyb21WYWx1ZSh2KSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHYpICYmICF0aGlzLmV4cGFuZCkgcmV0dXJuOwogICAgICB2YXIgb3BlbiA9IEFycmF5KHRoaXMuaXRlbXMubGVuZ3RoKS5maWxsKGZhbHNlKTsKCiAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHsKICAgICAgICBvcGVuW3ZdID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmICh2ICE9PSBudWxsKSB7CiAgICAgICAgb3BlbiA9IHY7CiAgICAgIH0KCiAgICAgIHRoaXMudXBkYXRlUGFuZWxzKG9wZW4pOwogICAgfSwKICAgIHVwZGF0ZVBhbmVsczogZnVuY3Rpb24gdXBkYXRlUGFuZWxzKG9wZW4pIHsKICAgICAgdGhpcy5vcGVuID0gb3BlbjsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMuaXRlbXNbaV0udG9nZ2xlKG9wZW4gJiYgb3BlbltpXSk7CiAgICAgIH0KICAgIH0sCiAgICBwYW5lbENsaWNrOiBmdW5jdGlvbiBwYW5lbENsaWNrKHVpZCkgewogICAgICB2YXIgb3BlbiA9IHRoaXMuZXhwYW5kID8gdGhpcy5vcGVuLnNsaWNlKCkgOiBBcnJheSh0aGlzLml0ZW1zLmxlbmd0aCkuZmlsbChmYWxzZSk7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy5pdGVtc1tpXS5fdWlkID09PSB1aWQpIHsKICAgICAgICAgIG9wZW5baV0gPSAhdGhpcy5vcGVuW2ldOwogICAgICAgICAgIXRoaXMuZXhwYW5kICYmIHRoaXMuJGVtaXQoJ2lucHV0Jywgb3BlbltpXSA/IGkgOiBudWxsKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMudXBkYXRlUGFuZWxzKG9wZW4pOwogICAgICBpZiAodGhpcy5leHBhbmQpIHRoaXMuJGVtaXQoJ2lucHV0Jywgb3Blbik7CiAgICB9LAogICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvbnRlbnQpIHsKICAgICAgdmFyIGkgPSB0aGlzLml0ZW1zLnB1c2goY29udGVudCkgLSAxOwogICAgICB0aGlzLnZhbHVlICE9PSBudWxsICYmIHRoaXMudXBkYXRlRnJvbVZhbHVlKHRoaXMudmFsdWUpOwogICAgICBjb250ZW50LnRvZ2dsZSghIXRoaXMub3BlbltpXSk7CiAgICB9LAogICAgdW5yZWdpc3RlcjogZnVuY3Rpb24gdW5yZWdpc3Rlcihjb250ZW50KSB7CiAgICAgIHZhciBpbmRleCA9IHRoaXMuaXRlbXMuZmluZEluZGV4KGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkuX3VpZCA9PT0gY29udGVudC5fdWlkOwogICAgICB9KTsKICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICB0aGlzLm9wZW4uc3BsaWNlKGluZGV4LCAxKTsKICAgIH0KICB9LAogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHsKICAgIHJldHVybiBoKCd1bCcsIHsKICAgICAgc3RhdGljQ2xhc3M6ICd2LWV4cGFuc2lvbi1wYW5lbCcsCiAgICAgIGNsYXNzOiB0aGlzLmNsYXNzZXMKICAgIH0sIHRoaXMuJHNsb3RzLmRlZmF1bHQpOwogIH0KfSk7"},{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../stylus/components/_expansion-panel.styl'\n\nimport { VExpansionPanelContent } from '.'\n\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\nimport mixins from '../../util/mixins'\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\n/* @vue/component */\nexport default mixins(Themeable, RegistrableProvide('expansionPanel')).extend({\n  name: 'v-expansion-panel',\n\n  provide (): object {\n    return {\n      expansionPanel: this\n    }\n  },\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n    expand: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    value: {\n      type: [Number, Array],\n      default: () => null\n    } as any as PropValidator<number | number[]>\n  },\n\n  data: () => ({\n    items: [] as VExpansionPanelContentInstance[],\n    open: [] as boolean[]\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--focusable': this.focusable,\n        'v-expansion-panel--popout': this.popout,\n        'v-expansion-panel--inset': this.inset,\n        ...this.themeClasses\n      }\n    }\n  },\n\n  watch: {\n    expand (v: boolean) {\n      let openIndex = -1\n      if (!v) {\n        // Close all panels unless only one is open\n        const openCount = this.open.reduce((acc, val) => val ? acc + 1 : acc, 0)\n        const open = Array(this.items.length).fill(false)\n\n        if (openCount === 1) {\n          openIndex = this.open.indexOf(true)\n        }\n\n        if (openIndex > -1) {\n          open[openIndex] = true\n        }\n\n        this.open = open\n      }\n\n      this.$emit('input', v ? this.open : (openIndex > -1 ? openIndex : null))\n    },\n    value (v: number | number[]) {\n      this.updateFromValue(v)\n    }\n  },\n\n  mounted () {\n    this.value !== null && this.updateFromValue(this.value)\n  },\n\n  methods: {\n    updateFromValue (v: number | number[]) {\n      if (Array.isArray(v) && !this.expand) return\n\n      let open = Array(this.items.length).fill(false)\n      if (typeof v === 'number') {\n        open[v] = true\n      } else if (v !== null) {\n        open = v\n      }\n\n      this.updatePanels(open)\n    },\n    updatePanels (open: boolean[]) {\n      this.open = open\n      for (let i = 0; i < this.items.length; i++) {\n        this.items[i].toggle(open && open[i])\n      }\n    },\n    panelClick (uid: number) {\n      const open = this.expand ? this.open.slice() : Array(this.items.length).fill(false)\n      for (let i = 0; i < this.items.length; i++) {\n        if (this.items[i]._uid === uid) {\n          open[i] = !this.open[i]\n          !this.expand && this.$emit('input', open[i] ? i : null)\n        }\n      }\n\n      this.updatePanels(open)\n      if (this.expand) this.$emit('input', open)\n    },\n    register (content: VExpansionPanelContentInstance) {\n      const i = this.items.push(content) - 1\n      this.value !== null && this.updateFromValue(this.value)\n      content.toggle(!!this.open[i])\n    },\n    unregister (content: VExpansionPanelContentInstance) {\n      const index = this.items.findIndex(i => i._uid === content._uid)\n      this.items.splice(index, 1)\n      this.open.splice(index, 1)\n    }\n  },\n\n  render (h): VNode {\n    return h('ul', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes\n    }, this.$slots.default)\n  }\n})\n"],"sourceRoot":""}]}